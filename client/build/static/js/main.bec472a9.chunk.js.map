{"version":3,"sources":["components/MainBar.js","components/Content.js","components/Meme.js","components/Memes.js","components/Layout.js","components/ShowMeme.js","routes.js","App.js","reportWebVitals.js","index.js"],"names":["MainBar","navigate","useNavigate","style","position","padding","alignItems","display","width","justifyContent","borderBottom","backgroundColor","zIndex","letterSpacing","marginLeft","cursor","onClick","fontWeight","color","fontSize","left","right","Button","variant","size","textTransform","fontFamily","borderRadius","margin","marginRight","useStyles","makeStyles","theme","helpertext","Content","newMeme","classes","React","useState","state","setState","colour","setColour","name","setName","caption","setCaption","url","setUrl","preview","setPreview","hidden","setHidden","helperText1","setHelperText1","helperText2","setHelperText2","message","setMessage","toggleDrawer","open","toggleColor","col","checkDuplicates","c","u","axios","post","withCredentials","then","res","startsWith","tester","Image","src","addEventListener","testUrl","catch","err","response","data","useEffect","Grid","container","item","xs","md","marginTop","textAlign","Drawer","BackdropProps","invisible","anchor","onClose","elevation","paddingLeft","paddingRight","maxWidth","Icon","onMouseEnter","onMouseLeave","sm","TextField","id","value","onChange","event","target","inputProps","fullWidth","helperText","FormHelperTextProps","className","multiline","rows","rowsMax","Paper","boxShadow","height","paddingTop","analyseTime","time","length","Date","getTime","parseInt","Meme","meme","Card","_id","Memes","signal","page","memes","setMemes","get","console","log","flexWrap","undefined","map","index","root","spacing","Layout","setSignal","setPage","count","setCount","getMemeCount","Container","minHeight","obj","Pagination","hidePrevButton","hideNextButton","extendedIcon","ShowMeme","useParams","setMeme","setOpen","handleClose","getMeme","checkFields","patch","Fab","aria-label","disabled","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","delete","routes","path","children","element","to","replace","App","routing","useRoutes","paddingBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bec472a9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport LaunchIcon from \"@material-ui/icons/Launch\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst MainBar = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        padding: \"14px 0px\",\r\n        alignItems: \"center\",\r\n        display: \"flex\",\r\n        width: \"100%\",\r\n        justifyContent: \"space-between\",\r\n        borderBottom: \"1px solid rgb(0,0,0,0.09)\",\r\n        backgroundColor: \"#ffb74d\",\r\n        zIndex: 10,\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          letterSpacing: \"0px\",\r\n          marginLeft: \"30px\",\r\n          cursor: \"pointer\",\r\n        }}\r\n        onClick={() => {\r\n          navigate(\"/\");\r\n        }}\r\n      >\r\n        {/* <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/e/e8/Logo_of_X_%28company%29.svg\"\r\n          height={24}\r\n          style={{ paddingRight: 4 }}\r\n        /> */}\r\n        <span\r\n          style={{\r\n            position: \"relative\",\r\n            fontWeight: 600,\r\n            color: \"#4F46E5\",\r\n            fontSize: 24,\r\n            left: 124.12,\r\n          }}\r\n        >\r\n          XMeme\r\n        </span>\r\n      </div>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          color: \"#fff\",\r\n          right: 20,\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          size=\"small\"\r\n          style={{\r\n            textTransform: \"none\",\r\n            fontFamily: \"Oxygen\",\r\n            color: \"white\",\r\n            // fontSize: \"16px\",\r\n            backgroundColor: \"#047857\",\r\n            // padding: \"7px 19px\",\r\n            borderRadius: \"7px\",\r\n            margin: \"auto\",\r\n            marginRight: \"20px\",\r\n            // position: \"fixed\",\r\n            // float: \"right\",\r\n            // right: 20,\r\n          }}\r\n          onClick={() => {}}\r\n        >\r\n          swagger\r\n          <LaunchIcon size=\"small\" />\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainBar;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./Content.css\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloseRoundedIcon from \"@material-ui/icons/CloseRounded\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  helpertext: {\r\n    fontFamily: \"Oxygen\",\r\n    color: \"red\",\r\n    fontWeight: 700,\r\n  },\r\n}));\r\n\r\nconst Content = ({ newMeme }) => {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useState(false);\r\n\r\n  const [colour, setColour] = React.useState({ color: \"#9EA2AD\" });\r\n\r\n  const [name, setName] = React.useState(\"\");\r\n  const [caption, setCaption] = React.useState(\"\");\r\n  const [url, setUrl] = React.useState(\"\");\r\n  const [preview, setPreview] = React.useState(\r\n    \"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\"\r\n  );\r\n\r\n  const [hidden, setHidden] = React.useState(true);\r\n\r\n  const [helperText1, setHelperText1] = React.useState(\"\");\r\n  const [helperText2, setHelperText2] = React.useState(\"\");\r\n\r\n  const [message, setMessage] = React.useState(\r\n    \"Make sure all fields are filled up.\"\r\n  );\r\n\r\n  const toggleDrawer = (open) => {\r\n    setState(open);\r\n  };\r\n\r\n  const toggleColor = (col) => {\r\n    setColour({ color: col });\r\n  };\r\n\r\n  const testUrl = () => {\r\n    if (url.startsWith(\"/\") || url.startsWith(\"api/v1\")) {\r\n      setPreview(\"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\");\r\n      setHidden(false);\r\n      setMessage(\"Invalid URL\");\r\n      return;\r\n    }\r\n\r\n    var tester = new Image();\r\n    tester.src = url;\r\n    tester.addEventListener(\"load\", () => {\r\n      setPreview(url);\r\n      setHidden(true);\r\n      setMessage(\"Make sure all fields are filled up.\");\r\n    });\r\n    tester.addEventListener(\"error\", () => {\r\n      setPreview(\"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\");\r\n      setHidden(false);\r\n      setMessage(\"Invalid URL\");\r\n    });\r\n  };\r\n\r\n  const checkFields = () => {\r\n    if (\r\n      name !== \"\" &&\r\n      caption !== \"\" &&\r\n      url !== \"\" &&\r\n      preview === url &&\r\n      helperText1 === \"\" &&\r\n      helperText2 === \"\"\r\n    ) {\r\n      toggleDrawer(false);\r\n      newMeme({ name, caption, url });\r\n    } else\r\n      setHidden(\r\n        name !== \"\" &&\r\n          caption !== \"\" &&\r\n          url !== \"\" &&\r\n          preview === url &&\r\n          helperText1 === \"\" &&\r\n          helperText2 === \"\"\r\n      );\r\n  };\r\n\r\n  const checkDuplicates = (c, u) => {\r\n    axios\r\n      .post(\r\n        \"/api/v1/memes/check\",\r\n        { caption: c, url: u },\r\n        { withCredentials: true }\r\n      )\r\n      .then((res) => {\r\n        if (c) setHelperText1(\"\");\r\n        else if (u) {\r\n          setHelperText2(\"\");\r\n          testUrl();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (c) setHelperText1(err.response.data);\r\n        else if (u) setHelperText2(err.response.data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (url === \"\") {\r\n      setHelperText2(\"\");\r\n      setPreview(\"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\");\r\n      setHidden(true);\r\n      setMessage(\"Make sure all fields are filled up.\");\r\n    } else {\r\n      checkDuplicates(null, url);\r\n    }\r\n  }, [url]);\r\n\r\n  useEffect(() => {\r\n    if (caption === \"\") setHelperText1(\"\");\r\n    else checkDuplicates(caption, null);\r\n  }, [caption]);\r\n\r\n  useEffect(() => {\r\n    if (state === false) {\r\n      setName(\"\");\r\n      setCaption(\"\");\r\n      setUrl(\"\");\r\n      setPreview(\"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\");\r\n      setHidden(true);\r\n    }\r\n  }, [state]);\r\n\r\n  return [\r\n    <Grid\r\n      container\r\n      style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n    >\r\n      <Grid item xs={12} md={7}>\r\n        <h1\r\n          style={{\r\n            padding: \"30px 10px 0px 10px\",\r\n            marginTop: \"23px\",\r\n            fontWeight: 700,\r\n            letterSpacing: \"-1px\",\r\n            fontSize: \"36px\",\r\n            textAlign: \"left\",\r\n          }}\r\n        >\r\n          X Meme\r\n        </h1>\r\n        <h3\r\n          style={{\r\n            padding: \"0px 10px\",\r\n            margin: \"-10px 0px 0px 0px\",\r\n            fontSize: \"20px\",\r\n            fontWeight: 400,\r\n            color: \"#837280\",\r\n            textAlign: \"left\",\r\n          }}\r\n        >\r\n          Post your memes, don't dos/ddos me, it's on a free server\r\n        </h3>\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        md={5}\r\n        style={{\r\n          padding: \"10px 0px\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          position: \"fixed\",\r\n          right: 20,\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          style={{\r\n            textTransform: \"none\",\r\n            fontFamily: \"Oxygen\",\r\n            color: \"white\",\r\n            fontSize: \"16px\",\r\n            backgroundColor: \"#4338CA\",\r\n            padding: \"7px 19px\",\r\n            borderRadius: \"7px\",\r\n            margin: \"auto\",\r\n            // position: \"fixed\",\r\n            // float: \"right\",\r\n            // right: 20,\r\n          }}\r\n          onClick={() => toggleDrawer(true)}\r\n        >\r\n          Create Meme\r\n        </Button>\r\n      </Grid>\r\n    </Grid>,\r\n    <Drawer\r\n      BackdropProps={{ invisible: true }}\r\n      anchor={\"right\"}\r\n      open={state}\r\n      onClose={() => toggleDrawer(false)}\r\n      style={{ width: \"50px\" }}\r\n      elevation={1}\r\n      width=\"50%\"\r\n    >\r\n      <div style={{ display: \"flex\", backgroundColor: \"#F9FAFB\" }}>\r\n        <div style={{ paddingLeft: 20, paddingRight: 20, maxWidth: \"600px\" }}>\r\n          <h4 style={{ fontWeight: 400, fontSize: 20 }}>New X Meme</h4>\r\n          <h5\r\n            style={{\r\n              fontWeight: 400,\r\n              fontSize: 14,\r\n              color: \"#6b7280\",\r\n              marginTop: \"-18px\",\r\n            }}\r\n          >\r\n            Get started by filling in the information below to create your new\r\n            xmeme. Don't DOS it please. Be a human.\r\n          </h5>\r\n        </div>\r\n        <div style={{ padding: \"30px 10px\" }}>\r\n          <Icon\r\n            onClick={() => toggleDrawer(false)}\r\n            style={{ cursor: \"pointer\" }}\r\n            onMouseEnter={() => toggleColor(\"#6B7280\")}\r\n            onMouseLeave={() => toggleColor(\"#9EA2AD\")}\r\n          >\r\n            <CloseRoundedIcon style={colour} />\r\n          </Icon>\r\n        </div>\r\n      </div>\r\n      <Grid\r\n        container\r\n        style={{\r\n          borderBottom: \"1px solid rgb(0,0,0,0.1)\",\r\n          padding: \"20px 20px\",\r\n          fontSize: \"16px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={5}\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <span style={{ fontSize: \"14px\" }}>Meme Owner *</span>\r\n        </Grid>\r\n        <Grid item xs={12} sm={7}>\r\n          <TextField\r\n            id=\"name\"\r\n            size=\"small\"\r\n            value={name}\r\n            onChange={(event) => {\r\n              setName(event.target.value);\r\n            }}\r\n            inputProps={{ style: { fontFamily: \"Oxygen\", fontSize: \"14px\" } }}\r\n            fullWidth\r\n            id=\"outlined-name\"\r\n            placeholder=\"Enter your full name\"\r\n            variant=\"outlined\"\r\n            className=\"inputRounded\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        style={{\r\n          borderBottom: \"1px solid rgb(0,0,0,0.1)\",\r\n          padding: \"20px 20px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={5}\r\n          style={{ display: \"flex\", alignItems: \"center\" }}\r\n        >\r\n          <span style={{ fontSize: \"14px\" }}>Caption *</span>\r\n        </Grid>\r\n        <Grid item xs={12} sm={7}>\r\n          <TextField\r\n            id=\"caption\"\r\n            value={caption}\r\n            helperText={helperText1}\r\n            FormHelperTextProps={{\r\n              className: classes.helpertext,\r\n            }}\r\n            onChange={(event) => {\r\n              setCaption(event.target.value);\r\n            }}\r\n            size=\"small\"\r\n            inputProps={{ style: { fontFamily: \"Oxygen\", fontSize: \"14px\" } }}\r\n            fullWidth\r\n            multiline\r\n            rows={3}\r\n            rowsMax={3}\r\n            id=\"outlined-caption\"\r\n            placeholder=\"Be creative with your caption\"\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        style={{\r\n          borderBottom: \"1px solid rgb(0,0,0,0.1)\",\r\n          padding: \"20px 20px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={5}\r\n          style={{ display: \"flex\", alignItems: \"center\" }}\r\n        >\r\n          <span style={{ fontSize: \"14px\" }}>Meme URL *</span>\r\n        </Grid>\r\n        <Grid item xs={12} sm={7}>\r\n          <TextField\r\n            id=\"url\"\r\n            value={url}\r\n            helperText={helperText2}\r\n            FormHelperTextProps={{\r\n              className: classes.helpertext,\r\n            }}\r\n            onChange={(event) => {\r\n              setUrl(event.target.value);\r\n            }}\r\n            size=\"small\"\r\n            inputProps={{ style: { fontFamily: \"Oxygen\", fontSize: \"14px\" } }}\r\n            fullWidth\r\n            id=\"outlined-url\"\r\n            placeholder=\"Enter URL of your meme here\"\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        style={{\r\n          borderBottom: \"1px solid rgb(0,0,0,0.1)\",\r\n          padding: \"20px 20px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={5}\r\n          style={{ display: \"flex\", alignItems: \"center\" }}\r\n        >\r\n          <span style={{ fontSize: \"14px\" }}>Meme Preview *</span>\r\n        </Grid>\r\n        <Grid item xs={12} sm={7}>\r\n          <Paper\r\n            elevation={1}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              boxShadow: \"0px 2px 4px 1px rgb(0,0,0,0.1)\",\r\n            }}\r\n          >\r\n            <img src={preview} height=\"260px\" width=\"350px\" />\r\n          </Paper>\r\n          <div style={{ margin: \"10px 0px 10px 0px\", fontSize: \"18px\" }}>\r\n            {caption}\r\n          </div>\r\n          <div\r\n            style={{ margin: \"0px 0px\", color: \"#6b7280\", fontSize: \"16px\" }}\r\n          >\r\n            {name}\r\n          </div>\r\n        </Grid>\r\n        <div hidden={hidden} style={{ paddingTop: \"40px\", color: \"#b91c1c\" }}>\r\n          {message}\r\n        </div>\r\n      </Grid>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          padding: \"10px 18px\",\r\n          justifyContent: \"flex-end\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"outlined\"\r\n          style={{\r\n            textTransform: \"none\",\r\n            fontFamily: \"Oxygen\",\r\n            fontSize: \"14px\",\r\n            padding: \"5px 15px\",\r\n            margin: \"10px\",\r\n            borderRadius: \"7px\",\r\n          }}\r\n          onClick={() => toggleDrawer(false)}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          style={{\r\n            textTransform: \"none\",\r\n            fontFamily: \"Oxygen\",\r\n            color: \"white\",\r\n            fontSize: \"14px\",\r\n            backgroundColor: \"#4338CA\",\r\n            padding: \"5px 15px\",\r\n            margin: \"10px\",\r\n            borderRadius: \"7px\",\r\n          }}\r\n          onClick={() => {\r\n            checkFields();\r\n          }}\r\n        >\r\n          Create\r\n        </Button>\r\n      </div>\r\n    </Drawer>,\r\n  ];\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst analyseTime = (time) => {\r\n  let length = (new Date().getTime() - new Date(time).getTime()) / 1000;\r\n\r\n  if (length < 60) return `just now`;\r\n  if (length < 120) return `a min ago`;\r\n  length = length / 60;\r\n\r\n  if (length < 60) return `${parseInt(length)} mins ago`;\r\n  length = length / 60;\r\n\r\n  if (length < 2) return `an hour ago`;\r\n  if (length < 24) return `${parseInt(length)} hours ago`;\r\n  length = length / 24;\r\n\r\n  if (length < 2) return `a day ago`;\r\n  if (length < 31) return `${parseInt(length)} days ago`;\r\n  length = length / 30.5;\r\n\r\n  if (length < 2) return `a month ago`;\r\n  if (length < 12) return `${parseInt(length)} months ago`;\r\n  length = length / 12;\r\n\r\n  if (length < 2) return `an year ago`;\r\n\r\n  return `${parseInt(length)} years ago`;\r\n};\r\n\r\nconst Meme = ({ meme }) => {\r\n  const navigate = useNavigate();\r\n\r\n  const [preview, setPreview] = React.useState(\"\");\r\n\r\n  var tester = new Image();\r\n  tester.src = meme.url;\r\n  tester.addEventListener(\"load\", () => setPreview(meme.url));\r\n  tester.addEventListener(\"error\", () =>\r\n    setPreview(\"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\")\r\n  );\r\n\r\n  return (\r\n    <Grid item style={{ padding: \"50px 10px 0px 10px\" }} xs={12} sm={6} md={4}>\r\n      <Card\r\n        elevation={1}\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          boxShadow: \"0px 2px 4px 1px rgb(0,0,0,0.1)\",\r\n          width: \"100%\",\r\n          textAlign: \"left\",\r\n          cursor: \"pointer\",\r\n        }}\r\n        onClick={() => {\r\n          navigate(`/memes/${meme._id}`);\r\n        }}\r\n      >\r\n        <img src={preview} height=\"200px\" width=\"300px\" />\r\n      </Card>\r\n      <div\r\n        style={{\r\n          margin: \"10px 0px 10px 0px\",\r\n          fontSize: \"18px\",\r\n          textAlign: \"left\",\r\n        }}\r\n      >\r\n        {meme.caption}\r\n      </div>\r\n      <div\r\n        style={{\r\n          margin: \"0px 0px\",\r\n          color: \"#6b7280\",\r\n          fontSize: \"16px\",\r\n          textAlign: \"left\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <div>{meme.name}</div>\r\n        <div>{analyseTime(meme.time)}</div>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport Meme from \"./Meme\";\r\n\r\nconst Memes = ({ signal, page }) => {\r\n  const [memes, setMemes] = React.useState([]);\r\n  const [message, setMessage] = React.useState(\"\");\r\n\r\n  const getMemes = () => {\r\n    axios\r\n      .get(`/api/v1/memes/page/${page}`, {\r\n        withCredentials: true,\r\n      })\r\n      .then((res) => {\r\n        setMemes(res.data.memes);\r\n        setMessage(\"No Memes Yet\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMemes();\r\n  }, [signal, page]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      style={{\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"flex-start\",\r\n      }}\r\n    >\r\n      {memes != null && memes != undefined && memes.length !== 0 ? (\r\n        memes.map((meme, index) => {\r\n          return <Meme meme={meme} key={index} />;\r\n        })\r\n      ) : (\r\n        <div\r\n          style={{\r\n            height: \"200px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            fontSize: \"30px\",\r\n          }}\r\n        >\r\n          {message}\r\n        </div>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Memes;\r\n","import React, { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Content from \"./Content\";\r\nimport Memes from \"./Memes\";\r\n\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    display: \"flex\",\r\n    alignItems: \"baseline\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nfunction Layout() {\r\n  const classes = useStyles();\r\n  const [signal, setSignal] = React.useState(false);\r\n\r\n  const [page, setPage] = React.useState(1);\r\n  const [count, setCount] = React.useState(1);\r\n\r\n  const addNewMeme = (obj) => {\r\n    axios\r\n      .post(\"/api/v1/memes\", { meme: obj }, { withCredentials: true })\r\n      .then((res) => {\r\n        setSignal(!signal);\r\n        getMemeCount();\r\n      });\r\n  };\r\n\r\n  const getMemeCount = () => {\r\n    axios\r\n      .get(\"/api/v1/memes\", {\r\n        withCredentials: true,\r\n      })\r\n      .then((res) => {\r\n        setCount(parseInt((res.data.memes.length - 1) / 100 + 1));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMemeCount();\r\n  }, []);\r\n\r\n  const changePage = (event, value) => {\r\n    setPage(value);\r\n  };\r\n\r\n  return [\r\n    <div style={{ height: \"60px\" }}></div>,\r\n    <Container maxWidth=\"lg\" style={{ minHeight: \"100vh\" }}>\r\n      <Content newMeme={addNewMeme} key=\"content\" />\r\n      <div className={classes.root}>\r\n        Page&nbsp;&nbsp;\r\n        <Pagination\r\n          count={count}\r\n          page={page}\r\n          onChange={changePage}\r\n          color=\"primary\"\r\n          hidePrevButton\r\n          hideNextButton\r\n        />\r\n      </div>\r\n      <Memes signal={signal} page={page} key=\"memes\" />\r\n    </Container>,\r\n  ];\r\n}\r\n\r\nexport default Layout;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { useParams } from \"react-router\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloseRoundedIcon from \"@material-ui/icons/CloseRounded\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport Meme from \"./Meme\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  helpertext: {\r\n    fontFamily: \"Oxygen\",\r\n    color: \"red\",\r\n    fontWeight: 700,\r\n  },\r\n}));\r\n\r\nconst ShowMeme = () => {\r\n  const classes = useStyles();\r\n\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n\r\n  const [meme, setMeme] = React.useState(\"\");\r\n\r\n  const [state, setState] = React.useState(false);\r\n  const [colour, setColour] = React.useState({ color: \"#9EA2AD\" });\r\n\r\n  const [caption, setCaption] = React.useState(\"\");\r\n  const [url, setUrl] = React.useState(\"\");\r\n  const [preview, setPreview] = React.useState(\r\n    \"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\"\r\n  );\r\n\r\n  const [hidden, setHidden] = React.useState(true);\r\n\r\n  const [helperText1, setHelperText1] = React.useState(\"\");\r\n  const [helperText2, setHelperText2] = React.useState(\"\");\r\n\r\n  const [message, setMessage] = React.useState(\r\n    \"Make sure all fields are filled up.\"\r\n  );\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const getMeme = () => {\r\n    axios\r\n      .get(`/api/v1/memes/${id}`, { withCredentials: true })\r\n      .then((res) => {\r\n        setMeme(res.data.meme);\r\n      })\r\n      .catch((err) => {\r\n        navigate(\"/\");\r\n      });\r\n  };\r\n\r\n  const updateMeme = () => {\r\n    axios\r\n      .patch(`/api/v1/memes/${id}`, { caption, url }, { withCredentials: true })\r\n      .then((res) => {\r\n        getMeme();\r\n      })\r\n      .catch((err) => {\r\n        getMeme();\r\n      });\r\n  };\r\n\r\n  const deleteMeme = () => {\r\n    axios\r\n      .delete(`/api/v1/memes/${id}`, { withCredentials: true })\r\n      .then((res) => {\r\n        navigate(\"/\");\r\n      })\r\n      .catch((err) => {\r\n        handleClose();\r\n        getMeme();\r\n      });\r\n  };\r\n\r\n  const shouldUpdate = () => {\r\n    return caption !== meme.caption || url !== meme.url;\r\n  };\r\n\r\n  const toggleDrawer = (open) => {\r\n    setState(open);\r\n  };\r\n\r\n  const toggleColor = (col) => {\r\n    setColour({ color: col });\r\n  };\r\n\r\n  const testUrl = () => {\r\n    if (url.startsWith(\"/\") || url.startsWith(\"api/v1\")) {\r\n      setPreview(\"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\");\r\n      setHidden(false);\r\n      setMessage(\"Invalid URL\");\r\n      return;\r\n    }\r\n\r\n    var tester = new Image();\r\n    tester.src = url;\r\n    tester.addEventListener(\"load\", () => {\r\n      setPreview(url);\r\n      setHidden(true);\r\n      setMessage(\"Make sure all fields are filled up.\");\r\n    });\r\n    tester.addEventListener(\"error\", () => {\r\n      setPreview(\"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\");\r\n      setHidden(false);\r\n      setMessage(\"Invalid URL\");\r\n    });\r\n  };\r\n\r\n  const checkFields = () => {\r\n    if (caption !== \"\" && url !== \"\" && preview === url) {\r\n      toggleDrawer(false);\r\n      updateMeme();\r\n    } else\r\n      setHidden(\r\n        caption !== \"\" &&\r\n          url !== \"\" &&\r\n          preview === url &&\r\n          helperText1 === \"\" &&\r\n          helperText2 === \"\"\r\n      );\r\n  };\r\n\r\n  const checkDuplicates = (c, u) => {\r\n    axios\r\n      .post(\r\n        \"/api/v1/memes/check\",\r\n        { caption: c, url: u },\r\n        { withCredentials: true }\r\n      )\r\n      .then((res) => {\r\n        if (c) setHelperText1(\"\");\r\n        else if (u) {\r\n          setHelperText2(\"\");\r\n          testUrl();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (c) setHelperText1(err.response.data);\r\n        else if (u) setHelperText2(err.response.data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (url === undefined || url === null) return;\r\n    if (url === \"\") {\r\n      setHelperText2(\"\");\r\n      setPreview(\"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\");\r\n      setHidden(true);\r\n      setMessage(\"Make sure all fields are filled up.\");\r\n    } else if (url !== meme.url) {\r\n      checkDuplicates(null, url);\r\n    } else {\r\n      setHelperText2(\"\");\r\n      setPreview(url);\r\n      setHidden(true);\r\n    }\r\n  }, [url]);\r\n\r\n  useEffect(() => {\r\n    if (caption === \"\" || caption === meme.caption) setHelperText1(\"\");\r\n    else checkDuplicates(caption, null);\r\n  }, [caption]);\r\n\r\n  useEffect(() => {\r\n    setCaption(meme.caption);\r\n    setUrl(meme.url);\r\n  }, [meme]);\r\n\r\n  useEffect(() => {\r\n    getMeme();\r\n  }, []);\r\n\r\n  return [\r\n    <div\r\n      style={{ display: \"flex\", justifyContent: \"center\", paddingTop: \"100px\" }}\r\n    >\r\n      <Fab\r\n        variant=\"extended\"\r\n        color=\"primary\"\r\n        aria-label=\"add\"\r\n        style={{ marginRight: \"80px\", fontFamily: \"Oxygen\", fontWeight: 700 }}\r\n        onClick={() => toggleDrawer(true)}\r\n      >\r\n        <EditIcon className={classes.extendedIcon} />\r\n        EDIT\r\n      </Fab>\r\n      <Fab\r\n        variant=\"extended\"\r\n        color=\"secondary\"\r\n        aria-label=\"add\"\r\n        style={{ fontFamily: \"Oxygen\", fontWeight: 700 }}\r\n        onClick={() => {\r\n          handleClickOpen();\r\n        }}\r\n      >\r\n        <DeleteIcon className={classes.extendedIcon} />\r\n        DELETE\r\n      </Fab>\r\n    </div>,\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <Meme meme={meme} />\r\n    </div>,\r\n    <Drawer\r\n      BackdropProps={{ invisible: true }}\r\n      anchor={\"right\"}\r\n      open={state}\r\n      onClose={() => toggleDrawer(false)}\r\n      style={{ width: \"50px\" }}\r\n      elevation={1}\r\n      width=\"50%\"\r\n    >\r\n      <div style={{ display: \"flex\", backgroundColor: \"#F9FAFB\" }}>\r\n        <div style={{ paddingLeft: 20, paddingRight: 20, maxWidth: \"600px\" }}>\r\n          <h4 style={{ fontWeight: 400, fontSize: 20 }}>Edit X Meme</h4>\r\n          <h5\r\n            style={{\r\n              fontWeight: 400,\r\n              fontSize: 14,\r\n              color: \"#6b7280\",\r\n              marginTop: \"-18px\",\r\n            }}\r\n          >\r\n            Get started by filling in the information below to create your new\r\n            xmeme. Don't DOS it please. Be a human.\r\n          </h5>\r\n        </div>\r\n        <div style={{ padding: \"30px 10px\" }}>\r\n          <Icon\r\n            onClick={() => toggleDrawer(false)}\r\n            style={{ cursor: \"pointer\" }}\r\n            onMouseEnter={() => toggleColor(\"#6B7280\")}\r\n            onMouseLeave={() => toggleColor(\"#9EA2AD\")}\r\n          >\r\n            <CloseRoundedIcon style={colour} />\r\n          </Icon>\r\n        </div>\r\n      </div>\r\n      <Grid\r\n        container\r\n        style={{\r\n          borderBottom: \"1px solid rgb(0,0,0,0.1)\",\r\n          padding: \"20px 20px\",\r\n          fontSize: \"16px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={5}\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <span style={{ fontSize: \"14px\" }}>Meme Owner *</span>\r\n        </Grid>\r\n        <Grid item xs={12} sm={7}>\r\n          <TextField\r\n            id=\"name\"\r\n            size=\"small\"\r\n            value={meme.name}\r\n            disabled\r\n            inputProps={{ style: { fontFamily: \"Oxygen\", fontSize: \"14px\" } }}\r\n            fullWidth\r\n            id=\"outlined-name\"\r\n            placeholder=\"Enter your full name\"\r\n            variant=\"outlined\"\r\n            className=\"inputRounded\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        style={{\r\n          borderBottom: \"1px solid rgb(0,0,0,0.1)\",\r\n          padding: \"20px 20px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={5}\r\n          style={{ display: \"flex\", alignItems: \"center\" }}\r\n        >\r\n          <span style={{ fontSize: \"14px\" }}>Caption *</span>\r\n        </Grid>\r\n        <Grid item xs={12} sm={7}>\r\n          <TextField\r\n            id=\"caption\"\r\n            value={caption}\r\n            helperText={helperText1}\r\n            FormHelperTextProps={{\r\n              className: classes.helpertext,\r\n            }}\r\n            onChange={(event) => {\r\n              setCaption(event.target.value);\r\n            }}\r\n            size=\"small\"\r\n            inputProps={{ style: { fontFamily: \"Oxygen\", fontSize: \"14px\" } }}\r\n            fullWidth\r\n            multiline\r\n            rows={3}\r\n            rowsMax={3}\r\n            id=\"outlined-caption\"\r\n            placeholder=\"Be creative with your caption\"\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        style={{\r\n          borderBottom: \"1px solid rgb(0,0,0,0.1)\",\r\n          padding: \"20px 20px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={5}\r\n          style={{ display: \"flex\", alignItems: \"center\" }}\r\n        >\r\n          <span style={{ fontSize: \"14px\" }}>Meme URL *</span>\r\n        </Grid>\r\n        <Grid item xs={12} sm={7}>\r\n          <TextField\r\n            id=\"url\"\r\n            value={url}\r\n            helperText={helperText2}\r\n            FormHelperTextProps={{\r\n              className: classes.helpertext,\r\n            }}\r\n            onChange={(event) => {\r\n              setUrl(event.target.value);\r\n            }}\r\n            size=\"small\"\r\n            inputProps={{ style: { fontFamily: \"Oxygen\", fontSize: \"14px\" } }}\r\n            fullWidth\r\n            id=\"outlined-url\"\r\n            placeholder=\"Enter URL of your meme here\"\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        style={{\r\n          borderBottom: \"1px solid rgb(0,0,0,0.1)\",\r\n          padding: \"20px 20px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={5}\r\n          style={{ display: \"flex\", alignItems: \"center\" }}\r\n        >\r\n          <span style={{ fontSize: \"14px\" }}>Meme Preview *</span>\r\n        </Grid>\r\n        <Grid item xs={12} sm={7}>\r\n          <Paper\r\n            elevation={1}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              boxShadow: \"0px 2px 4px 1px rgb(0,0,0,0.1)\",\r\n            }}\r\n          >\r\n            <img src={preview} height=\"260px\" width=\"350px\" />\r\n          </Paper>\r\n          <div style={{ margin: \"10px 0px 10px 0px\", fontSize: \"18px\" }}>\r\n            {caption}\r\n          </div>\r\n          <div\r\n            style={{ margin: \"0px 0px\", color: \"#6b7280\", fontSize: \"16px\" }}\r\n          >\r\n            {meme.name}\r\n          </div>\r\n        </Grid>\r\n        <div hidden={hidden} style={{ paddingTop: \"40px\", color: \"#b91c1c\" }}>\r\n          {message}\r\n        </div>\r\n      </Grid>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          padding: \"10px 18px\",\r\n          justifyContent: \"flex-end\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"outlined\"\r\n          style={{\r\n            textTransform: \"none\",\r\n            fontFamily: \"Oxygen\",\r\n            fontSize: \"14px\",\r\n            padding: \"5px 15px\",\r\n            margin: \"10px\",\r\n            borderRadius: \"7px\",\r\n          }}\r\n          onClick={() => toggleDrawer(false)}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          disabled={!shouldUpdate()}\r\n          style={{\r\n            textTransform: \"none\",\r\n            fontFamily: \"Oxygen\",\r\n            color: \"white\",\r\n            fontSize: \"14px\",\r\n            backgroundColor: \"#4338CA\",\r\n            padding: \"5px 15px\",\r\n            margin: \"10px\",\r\n            borderRadius: \"7px\",\r\n          }}\r\n          onClick={() => {\r\n            checkFields();\r\n          }}\r\n        >\r\n          Update\r\n        </Button>\r\n      </div>\r\n    </Drawer>,\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">Confirm Deletion?</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText\r\n          id=\"alert-dialog-description\"\r\n          style={{ fontFamily: \"Oxygen\" }}\r\n        >\r\n          Are you sure want to delete the Meme?\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={handleClose}\r\n          color=\"primary\"\r\n          style={{ fontFamily: \"Oxygen\" }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          autoFocus\r\n          style={{ fontFamily: \"Oxygen\" }}\r\n          onClick={() => {\r\n            deleteMeme();\r\n          }}\r\n        >\r\n          CONFIRM\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>,\r\n  ];\r\n};\r\n\r\nexport default ShowMeme;\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nimport Layout from \"./components/Layout\";\r\nimport ShowMeme from \"./components/ShowMeme\";\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    // element: <Layout />,\r\n    children: [\r\n      // { path: 'home', element: <Home /> },\r\n      { path: \"/\", element: <Layout /> },\r\n      { path: \"/memes/:id\", element: <ShowMeme /> },\r\n      { path: \"*\", element: <Navigate to=\"/\" replace /> },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport MainBar from \"./components/MainBar\";\r\n\r\nimport { useRoutes } from \"react-router-dom\";\r\n\r\nimport routes from \"./routes\";\r\n\r\nfunction App() {\r\n  const routing = useRoutes(routes);\r\n\r\n  return (\r\n    <div style={{ height: \"100%\", paddingBottom: \"30px\" }}>\r\n      <MainBar />\r\n      {routing}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}